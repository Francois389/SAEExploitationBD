from Bloc import Bloc

class Calendrier:
    def __init__(self, url: str) -> None:
        self.url_fichier = url
        self.liste_evenements = [Bloc]

    def get_data(self):
        self.liste_evenements = parse_data(self.url_fichier)
    
    def get_events(self):
        return self.liste_evenements



def parse_data(url: str) -> list:
    """
    arguments :
        url -> str : l'url du fichier a lire

    retours :
        liste_retours -> list : la liste de tous les creneaux du calendrier

    """

    liste_retour = []
    data_bloc = {}

    with open(url, encoding="utf-8") as fichier:
        liste_lignes = fichier.readlines()
        
        for ligne in liste_lignes:

            # TODO Créer des fonctions pour chaque cas
            ligne = ligne.replace(";", ",")
            
            # lorsque le creneau commence
            if ligne.startswith("BEGIN:VEVENT"):
                data_bloc = {
                    "creneau": {
                        "id"      : None,
                        "intitule": None,
                        "debut"   : None,
                        "fin"     : None,
                    },
                    "professeur"  : None,
                    "groupe"      : None, 
                    "salle"       : None,
                }

            # recuperation de la date de debut
            if ligne.startswith("DTSTART"):
                data_bloc["creneau"]["debut"] = ligne[8:-1]
            
            elif ligne.startswith("DTEND"):
                data_bloc["creneau"]["fin"] = ligne[6:-1]

            # recuperation de la salle
            elif ligne.startswith("LOCATION"):
                if ligne[9:-1] == "":
                    # gestion du cas ou la salle n'existe pas
                    data_bloc["salle"] = "Null"

                else:
                    data_bloc["salle"] = ligne[9:-1]
            
            # recuperation de la date de l'intitule
            #TODO Récupere si plusieur intitule dans la ligne. Ils sont séparé par un "\;"
            elif ligne.startswith("SUMMARY"):
                data_bloc["creneau"]["intitule"] = ligne[8:-1]

            # recuperation de la date du professeur et du groupe
            elif ligne.startswith("DESCRIPTION"):
                prof, groupe = get_prof_groupe(ligne=ligne)

                if prof == []:
                    data_bloc["professeur"] = "Null"
                else:
                    data_bloc["professeur"] = prof

                if groupe == []:
                    data_bloc["groupe"] = "Null"
                else:
                    data_bloc["groupe"] = ', '.join(groupe)

            elif ligne.startswith("UID"):
                data_bloc["creneau"]["id"] = ligne[4:].removesuffix("\n")

            # la fin du creneau
            elif ligne.startswith("END:VEVENT"):
                # on crée un nouveau creneau et avec le dictionnaire data_bloc
                # on ajoute les données du bloc dedans
                # on l'ajoute ensuite a la liste des creneaux du calendrier
                bloc: Bloc = Bloc(data_bloc)
                liste_retour.append(bloc)
        
        return liste_retour



LISTE_DES_PROFS = []

with open("data/enseignants.txt", encoding="utf-8") as fichier_professeur:
    for prof in fichier_professeur.readlines(): 
        LISTE_DES_PROFS.append(prof.removesuffix("\n"))

LISTE_DES_GROUPES = [] 

with open("data/groupes.txt", encoding="utf-8") as fichier_groupes:
    for grp in fichier_groupes.readlines():
        LISTE_DES_GROUPES.append(grp.split("\t")[0])

def get_prof_groupe(ligne: str) -> tuple:
    """
    arguments : 
        ligne -> str : une ligne DESCRIPTION du fichier ical

    
    pour recuperer les informations, on utilise un split qui analyse la ligne
    elle passe outre les '\n' pour se concentrer sur le groupe et le professeur.
    Il peut y avoir de 0 a plusieurs groupes et de 0 a plusieurs professeurs.

    retours :
        -> (professeur, groupe_eleve) : le professeur et le groupe
    """

    ligne_analysee = ligne.split("\\n")

    # listes en compréhension
    groupes_liste = [element for element in ligne_analysee if element in LISTE_DES_GROUPES]

    professeurs_liste = [element for element in ligne_analysee if element in LISTE_DES_PROFS]

    return professeurs_liste, groupes_liste
