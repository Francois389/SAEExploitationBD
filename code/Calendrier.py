import Creneau
import re as regex


class Calendrier:
    def __init__(self, url : str) -> None:
        self.url_fichier = url
        self.liste_evenements = []

    def get_data(self):
        self.liste_evenements = parse_data(self.url_fichier)
    
    def get_events(self):
        return self.liste_evenements



def parse_data(url : str) -> list:
    """
    arguments :
        url -> str : l'url du fichier a lire

    TODO commenter cette merde

    retours :
        liste_retours -> list : la liste de tous les creneaux du calendrier

    """

    liste_retour = []
    data_bloc = {}
    with open(url) as fichier:
        liste_lignes = fichier.readlines()
        
        for ligne in liste_lignes:
            
            # lorsque le creneau commence
            if ligne.startswith("BEGIN:VEVENT"):
                data_bloc = {}

            # recuperation de la date de debut
            if ligne.startswith("DTSTART"):
                data_bloc["debut"] = ligne[8:-1]
            
            elif ligne.startswith("DTEND"):
                data_bloc["fin"] = ligne[6:-1]

            # recuperation de la salle
            elif ligne.startswith("LOCATION"):
                if ligne[9:-1] == "":
                    # gestion du cas ou la salle n'existe pas

                    data_bloc["salle"] = "Null"
                else:
                    data_bloc["salle"] = ligne[9:-1]
            
            # recuperation de la date de l'intitule
            elif ligne.startswith("SUMMARY"):
                data_bloc["intitule"] = ligne[8:-1]

            # recuperation de la date du professeur et du groupe
            elif ligne.startswith("DESCRIPTION"):
                prof, groupe = get_prof_groupe(ligne=ligne)

                data_bloc["professeur"] = prof
                data_bloc["groupe"] = groupe

            # la fin du creneau
            elif ligne.startswith("END:VEVENT"):
                # on crée un nouveau creneau et avec le dictionnaire data_bloc
                # on ajoute les données du bloc dedans
                # on l'ajoute ensuite a la liste des creneaux du calendrier
                bloc = Creneau.Creneau()
                bloc.ajout_donnees(dico=data_bloc)
                liste_retour.append(bloc)
        
        return liste_retour



def get_prof_groupe(ligne : str) -> tuple[str, str]:
    """
    arguments : 
        ligne -> str : une ligne DESCRIPTION du fichier ical

    
    pour recuperer les informations, on utilise une ReGex qui analyse la ligne
    elle passe outre les '\n' pour se concentrer sur le groupe et le professeur.
    Il peut y avoir de 0 a 2 groupes et de 0 a 2 professeurs.

    retours :
        -> (professeur, groupe_eleve) : le professeur et le groupe
    """

    groupe_eleve = ""
    professeur = ""

    # RegEx permettant de détecter les chaînes de caractères débutant par "DESCRIPTION:\n\n",
    # suivi de un ou plusieurs caractères alphanumériques, d'un saut à la ligne et de tout caractère.
    # Syntaxe allégée des descriptions sur le fichier iCalendar.
    rgx_ligne = r"DESCRIPTION:\\n\\n([a-zA-Z0-9]+)\\n(.*)"

    # RegEx permettant de détecter les chaînes de caractères débutant par "DESCRIPTION:\n\n",
    # suivi de un ou plusieurs caractères alphanumériques, d'un saut à la ligne, de un ou plusieurs
    # caractères alphanumériques et/ou espaces, d'un autre saut à la ligne et de tout caractère.
    # Syntaxe des descriptions sur le fichier iCalendar.
    rgx_ligne_complete = r"DESCRIPTION:\\n\\n([a-zA-Z0-9]+)\\n([A-Za-z0-9 ]+)\\n(.*)"

    ligne_recherche = regex.search(rgx_ligne, ligne)
    
    if ligne_recherche:
        le_code = ligne_recherche.group(1)
        groupe_eleve = le_code          # on recupere le groupe 

    else:
        groupe_eleve = "Inconnu"        # si il n'y en a pas il est donc inconnu

    ligne_recherche = regex.search(rgx_ligne_complete, ligne)

    if ligne_recherche:
        nom = ligne_recherche.group(2)
        professeur = nom                # on recupere le professeur

    else:
        professeur = "Inconnu"          # si il n'y en a pas il est donc inconnu

    return professeur, groupe_eleve

