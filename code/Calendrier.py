import Creneau
import re as regex


class Calendrier:
    def __init__(self, url : str) -> None:
        self.url_fichier = url
        self.liste_evenements = []

    def get_data(self):
        self.liste_evenements = parse_data(self.url_fichier)
    
    def get_events(self):
        return self.liste_evenements


def parse_data(url : str) -> list:
    liste_retour = []
    data_bloc = {}
    with open(url) as fichier:
        liste_lignes = fichier.readlines()
        
        for ligne in liste_lignes:
            
            if ligne.startswith("BEGIN:VEVENT"):
                data_bloc = {}

            if ligne.startswith("DTSTART"):
                data_bloc["debut"] = ligne[9:-1]
            
            elif ligne.startswith("DTEND"):
                data_bloc["fin"] = ligne[6:-1]

            elif ligne.startswith("LOCATION"):
                if ligne[9:-1] == "":
                    data_bloc["salle"] = "Null"
                else:
                    data_bloc["salle"] = ligne[9:-1]
            
            elif ligne.startswith("SUMMARY"):
                data_bloc["intitule"] = ligne[8:-1]

            elif ligne.startswith("DESCRIPTION"):
                
                prof, groupe = get_prof_groupe(ligne=ligne)

                data_bloc["professeur"] = prof
                data_bloc["groupe"] = groupe


            elif ligne.startswith("END:VEVENT"):
                # print(data_bloc)
                bloc = Creneau.Creneau()
                bloc.ajout_donnees(dico=data_bloc)
                liste_retour.append(bloc)
        
        return liste_retour



def get_prof_groupe(ligne : str) -> tuple:

    groupe_eleve = ""
    professeur = ""

    # RegEx permettant de détecter les chaînes de caractères débutant par "DESCRIPTION:\n\n",
    # suivi de un ou plusieurs caractères alphanumériques, d'un saut à la ligne et de tout caractère.
    # Syntaxe allégée des descriptions sur le fichier iCalendar.
    rgx_ligne = r"DESCRIPTION:\\n\\n([a-zA-Z0-9]+)\\n(.*)"

    # RegEx permettant de détecter les chaînes de caractères débutant par "DESCRIPTION:\n\n",
    # suivi de un ou plusieurs caractères alphanumériques, d'un saut à la ligne, de un ou plusieurs
    # caractères alphanumériques et/ou espaces, d'un autre saut à la ligne et de tout caractère.
    # Syntaxe des descriptions sur le fichier iCalendar.
    rgx_ligne_complete = r"DESCRIPTION:\\n\\n([a-zA-Z0-9]+)\\n([A-Za-z0-9 ]+)\\n(.*)"

    ligne_recherche = regex.search(rgx_ligne, ligne)
    
    if ligne_recherche:
        le_code = ligne_recherche.group(1)

        groupe_eleve = le_code
    else:
        groupe_eleve = "Inconnu"

    ligne_recherche = regex.search(rgx_ligne_complete, ligne)

    if ligne_recherche:
        nom = ligne_recherche.group(2)

        # print("résultat :", le_code, nom)
        professeur = nom
    else:
        professeur = "Inconnu"

    return professeur, groupe_eleve