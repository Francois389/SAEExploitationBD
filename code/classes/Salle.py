from classes.Batiment import Batiment
from classes.donnees import LISTE_DES_SALLES

class Salle:
    """
    classe permettant de stocker les salles

    ses attributs sont :
        - nom : str -> nom de la salle
        - batiment : batiment -> batiment dans lequel est la salle
        - est_informatique : str -> 
    """

    def __init__(self, salle: str) -> None:
        self.nom: str  = salle
        self.batiment: Batiment
        self.est_informatique: str = self.find_bat_and_verif_si_informatique()


    def find_bat_and_verif_si_informatique(self) -> str:
        lisible = ""
        for i, ligne in enumerate(LISTE_DES_SALLES):
            lisible = ligne.split("\t")
            
            if self.nom == lisible[0]:
                self.batiment = Batiment(lisible[1])
                LISTE_DES_SALLES.pop(i)
                return "oui" if "oui" in ligne else "non"
            self.batiment = Batiment(nom_batiment="Null")
            return "non"
        
    
    def get_nom(self) -> str: return self.nom

    def get_batiment(self) -> Batiment: return self.batiment
    
    def get_informatique(self) -> bool: return self.est_informatique
        

    def get_colonnes_sql(self) -> tuple[str]:
        return ("(nom_salle, est_informatique, nom_batiment)")

    def get_valeurs_sql(self) -> tuple[str]:
        return (f"('{self.nom}', '{self.est_informatique}', '{self.batiment.get_nom_bat()}')")


    def __eq__(self, arg) -> bool:
        if type(arg) == type(None):
            return False

        return self.nom == arg.get_nom()

    def __gt__(self, arg) -> bool:
        return self.nom > arg.get_nom()
    
    def __lt__(self, arg) -> bool:
        return self.nom < arg.get_nom()

    def __str__(self) -> str:
        return f"Salle: \n\t{self.nom} \n\tBatiment: {self.get_batiment()} \n\tinformatique? {self.est_informatique}"
