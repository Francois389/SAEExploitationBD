from classes.Batiment import Batiment

class Salle:
    

    def __init__(self, salle: str) -> None:
        self.nom: str  = salle
        self.batiment: Batiment
        self.est_informatique: str = self.find_bat_and_verif_si_informatique()


    def find_bat_and_verif_si_informatique(self) -> str:
        with open("../data/salles.txt", encoding="utf-8") as fichier_salles:
            lisible = ""
            for ligne in fichier_salles.readlines():
                lisible = ligne.split("\t")
                
                if self.nom == lisible[0]:
                    self.batiment = Batiment(lisible[1])

                    return "oui" if "oui" in ligne else "non"
            self.batiment = Batiment(nom_batiment="Null")
            return "non"
        
    
    def get_nom(self) -> str: return self.nom

    def get_batiment(self) -> Batiment: return self.batiment
    
    def get_informatique(self) -> bool: return self.est_informatique
        

    def get_colonnes_sql(self) -> tuple[str]:
        return ("(nom_salle, est_informatique, nom_batiment)")

    def get_valeurs_sql(self) -> tuple[str]:
        return (f"('{self.nom}', '{self.est_informatique}', '{self.batiment.get_nom_bat()}')")


    def __eq__(self, arg) -> bool:
        if type(arg) == type(None):
            return False

        return self.nom == arg.get_nom()

    def __gt__(self, arg) -> bool:
        return self.nom > arg.get_nom()
    
    def __lt__(self, arg) -> bool:
        return self.nom < arg.get_nom()

    def __str__(self) -> str:
        return f"Salle: \n\t{self.nom} \n\tBatiment: {self.get_batiment()} \n\tinformatique? {self.est_informatique}"

# test = Salle("Amphitheatre", 0)
# a = Salle("A201", 0)
# b = Salle("Amphitheatre", 0)
# print(test == a)
# print(a == b)
# print(b == test)