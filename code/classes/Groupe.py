from classes.Departement import Departement

class Groupe:
    """
    La classe Groupe permet l'utilisation de la table groupe de la base de 
    données. 

    Un groupe est lié à un département et une année d'étude (1, 2 ou 3). Il 
    représente des étudiants sur l'emploi du temps lors de la définition de 
    créneaux. 
    """
    def __init__(self, nom: str) -> None:
        """
        Constructeur de la classe.
        Définition des attributs de classe utilisés dans les différentes 
        méthodes.

        Arguments :
            nom (str) -> Nom du groupe utilisé dans l'instance
        """
        self.nom_groupe:  str = nom
        self.departement: Departement = None
        self.annee_etude: int = None

        self.get_donnees_groupe()

    def get_donnees_groupe(self) -> None:
        """
        Méthode de récupération et de préparation au stockage dans la classe 
        des données du fichier de stockage des groupes (data/groupes.txt).
        """
        with open("data/groupes.txt") as fichier:
            for ligne in fichier.readlines():
                if self.nom_groupe in ligne:

                    ligne_split = ligne.replace("\n", "").split("\t")
                    self.departement = Departement(ligne_split[1], ligne_split[2])
                    self.annee_etude = self.departement.get_annee()

                
    def get_nom(self) -> str:
        """
        Getter de l'attribut nom.
        La méthode retourne la valeur de cet attribut.

        Retourne :
            Une chaîne de caractères contenant le nom du groupe.
        """ 
        return self.nom_groupe
    
    def get_annee(self) -> int: 
        """
        Getter de l'attribut annee.
        La méthode retourne la valeur de cet attribut.

        Retourne :
            Un entier contenant l'année d'étude liée au groupe.
            Valeurs possibles : 1 | 2 | 3
        """ 
        return self.annee_etude

    def get_departement(self) -> Departement: 
        """
        Getter de l'attribut departement.
        La méthode retourne la valeur de cet attribut.

        Retourne :
            Une instance de la classe Departement pour le département lié 
            au groupe.
        """  
        return "Null" if self.departement == None else self.departement

    def get_departement_id(self) -> str:
        """
        Getter de l'id l'attribut departement.
        La méthode retourne la valeur de cet attribut.

        Retourne :
            Un identifiant de la classe Departement pour le département lié 
            au groupe.
        """  
        return "Null" if self.departement == None else f"{self.departement.get_nom()}{self.departement.get_annee()}"

    def get_colonnes_sql(self) -> tuple[str]:
        return ("(nom_groupe, annee_etude, nom_departement)")

    def get_valeurs_sql(self) -> tuple[str]:
        return (f"('{self.nom_groupe}', '{self.annee_etude}', '{self.get_departement_id()}')")
    
    


    def __eq__(self, arg) -> bool:
        """
        Constructeur rendant possible la comparaison booléenne entre deux 
        instances de la classe : Groupe == Groupe.
        """
        return self.nom_groupe == arg.get_nom()

    def __gt__(self, arg) -> bool:
        return self.nom_groupe > arg.get_nom()
    
    def __lt__(self, arg) -> bool:
        return self.nom_groupe < arg.get_nom()

    def __str__(self) -> str:
        """
        Méthode permettant un affichage compréhensible lors de l'utilisation 
        de méthodes d'impression telles que print().
        """
        return f"Groupe: \n\t{self.nom_groupe} \n\tDepartement: \n\t{self.get_departement()}"
    
