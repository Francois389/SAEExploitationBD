from classes.Creneau import Creneau
from classes.Salle import Salle
from classes.Professeur import Professeur
from classes.Groupe import Groupe


class Bloc:
    """
    Classe d'objet Bloc.
    Événement dans l'emploi du temps (cours, séance, etc.).
    """
    def __init__(self, dico: dict) -> None:
        """
        Constructeur de la classe.
        Initialisation des attributs de la classe avec les valeurs
        passées en paramètre.

        Paramètres:
            dico (dict): dictionnaire détenant les informations sur 
                         le bloc d'événement
        """     
        self.creneau:     Creneau          = self.create_creneau(dico["creneau"])
        self.professeurs: list[Professeur] = self.create_prof(dico["professeur"])
        self.groupes:     list[Groupe]     = self.create_groupes(dico["groupe"])
        self.salles:      list[Salle]      = self.create_salle(dico["salle"])

        self.dictionnaire_donnees = dico

    
    def create_creneau(self, data: dict) -> Creneau:
        """
        Générateur permettant de récupérer le creneau de l'instance,
        via la classe Creneau.

        Args:
            data (dict): données contenant les informations sur 
                         le creneau 

        Returns:
            Creneau: objet de la classe Creneau avec les informations
                     données
        """
        id       = data["id"]
        intitule = data["intitule"]
        debut    = data["debut"]
        fin      = data["fin"]

        return Creneau(id=id, intitule=intitule, debut=debut, fin=fin)

    def create_prof(self, data) -> list[Professeur]:
        """
        Générateur permettant de récupérer un objet Professeur via les 
        données mises à disposition.

        Paramètres:
            data (str|list): Chaîne de caractères ou liste contenant
                             les différents professeurs

        Retourne:
            list[Professeur]: liste des professeurs récupérés
        """
        if (type(data) == str):
            return [Professeur(id=0, nom="Null", prenom="Null")]
        else:
            liste_retour = []
            for prof in data:
                ident = Professeur.find_ident(prof)
                temp = prof.split(" ")
                prenom = temp[0]
                nom = ' '.join(temp[1:])

                liste_retour.append(Professeur(id=ident, nom=nom, prenom=prenom))

            return liste_retour
        
    def create_groupes(self, data: str) -> list[Groupe]:
        """
        Générateur permettant la récupération des groupes depuis les 
        valeurs données.

        Paramètres:
            data (str): Chaîne de caractères contenant les 
                        les groupes

        Retourne:
            list[Groupe]: Liste des groupes récupérés
        """
        retour = []

        for grp in data.split(","):
            temp = Groupe(grp)
            temp.get_donnees_groupe()

            retour.append(temp)
        
        return retour
        
    def create_salle(self, data) -> list[Salle]:
        """
        Générateur permettant la récupération de la salle depuis les 
        données mises à disposition.

        Paramètres:
            data (str): Chaîne de caractères contenant la salle à 
                        extraire

        Retourne:
            Salle: Objet de la salle renvoyée
        """
        
        res = []

        for salle in data:
            res.append(Salle(salle=salle))

        return res

    def get_data_csv(self) -> list:
        """
        Générateur permettant la récupération de données depuis un 
        fichier CSV.
        Utiliser pour créer le csv contenant les évenements.

        Retourne:
            list: Liste des données récupérées 
        """
        resultat = [
            self.creneau.get_heure_debut(),
            self.creneau.get_heure_fin(),
            self.creneau.get_intitule(),
            self.lisible_salle(self.salles),
            self.lisible_groupe(self.groupes),
            self.lisible_prof(self.professeurs).removesuffix(", ")
        ]
        return resultat


    def lisible_salle(self, data: list[Salle]) -> str:
        """
        Préparation à l'affichage des groupes depuis la liste de 
        groupes.
        
        Args:
            data (list[Salle]): Liste d'objet Salle à utiliser

        Returns:
            str: _description_
        """
        res = ""

        for salle in data:
            res += salle.get_nom() + " "
        
        return res

    def lisible_groupe(self, data: list[Groupe]) -> str :
        """
        Préparation à l'affichage des groupes depuis la liste de 
        groupes.

        Paramètres:
            data (list[Groupe]): Liste d'objet Groupe à utiliser

        Retourne:
            str: Chaîne de caractères avec l'affichage de chaque 
                 groupe récupéré
        """
        if type(data) == str:
            return data
        else:
            res = ""
            for grp in data:
                res += grp.get_nom() + " "
            return res

    def lisible_prof(self, data: list[Professeur]) -> str:
        """
        Préparation à l'affichage des professeurs depuis la liste
        de professeurs.

        Paramètres:
            data (list[Professeur]): Liste d'objet Professeur à 
                                     utiliser

        Retourne:
            str: Chaîne de caractères avec l'affichage de l'identité
                 de chaque professeur récupéré
        """
        res = ""

        for prof in data:
            res = res + prof.get_prenom() + " " + prof.get_nom() + ", "  
        
        return res


    def get_creneau (self) -> Creneau: 
        """
        retours : 
            - creneau: Creneau -> l'objet de la classe Creneau du bloc
        
        getteur permettant de récupérer le créneau du bloc
        """
        return self.creneau
    
    def get_professeurs (self) -> list[Professeur]: 
        """
        retours : 
            - professeur: list[Professeur] -> la liste de tous les objets Professeur présent dans ce bloc
        
        getteur permettant de récupérer la liste de tous les professeurs présensts dans ce bloc 
        """
        return self.professeurs
    
    def get_groupes (self) -> list[Groupe]: 
        """
        retours : 
            - groupes: list[Groupe] -> la liste de tous les objets Groupe présent dans ce bloc
        
        getteur permettant de récupérer la liste de tous les groupes présensts dans ce bloc 
        """
        return self.groupes
    
    def get_salles (self) -> list[Salle]:
        """
        retours : 
            - salles: list[Salle] -> la liste de tous les objets Salle présent dans ce bloc
        
        getteur permettant de récupérer la liste de tous les salles utilisée par ce bloc 
        """
        return self.salles
    

    def __str__(self) -> str:
        res = str(self.creneau) + "\n"

        for prof in self.professeurs:
            res = res + str(prof) + "\n"

        for grp in self.groupes:
            res = res + str(grp) + "\n"

        for salle in self.salles:
            res = res + str(salle) + "\n"

        return res