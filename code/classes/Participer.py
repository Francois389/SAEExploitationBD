from classes.Groupe import Groupe
from classes.Creneau import Creneau

class Participer:
    """
    classe permettant de stocker les participation des groupes dans certains créneaux
    """
    def __init__(self, groupe: Groupe, creneau: Creneau) -> None:
        """
        arguments :
            - groupe: Groupe -> le groupe participant à ce créneau
            - creneau: Creneau -> le créneau auquel le groupe participe
        """
        self.nom_groupe: str = groupe.get_nom()
        self.id_creneau: str = creneau.get_identifiant()

    def get_nom_groupe(self) -> str:
        """
        retours : 
            - nom_groupe: le nom du groupe participant à ce créneau
        getteur permettant de récupérer le nom du groupe
        """
        return self.nom_groupe
    
    def get_id_creneau(self) -> str:
        """
        retours : 
            - id_creneau: l'id du creneau auquel le groupe participe
        getteur permettant de récupérer l'identifiant du créneau
        """
        return self.id_creneau
    
    def get_colonnes_sql(self) -> tuple[str]:
        """
        permet de récupérer les différentes colonnes pour faciliter 
        la création des scripts d'insertion
        """
        return ("(nom_groupe, id_creneau)")

    def get_valeurs_sql(self) -> tuple[str]:
        """
        permet de récupérer les valeurs à insérer pour faciliter 
        la création des scripts d'insertion 
        """
        return (f"('{self.nom_groupe}', '{self.id_creneau}')")
    
    def __eq__(self, arg) -> bool:
        if type(arg) == type(None):
            return False

        return self.nom_groupe == arg.get_nom_groupe() and self.id_creneau == arg.get_id_creneau()

    def __gt__(self, arg) -> bool:
        return self.nom_groupe > arg.get_nom_groupe()
    
    def __lt__(self, arg) -> bool:
        return self.nom_groupe < arg.get_nom_groupe()

    def __str__(self) -> str:
        return f"le groupe {self.groupe} participe au {self.id_creneau}"
    
